// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/shuoyang2016/mywish/rpc/player.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Player struct {
	Id    int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Alias string `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Player) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type Bidder struct {
	Id                 int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name               string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Bids               []*Bid   `protobuf:"bytes,3,rep,name=bids" json:"bids,omitempty"`
	TotalAmount        *Price   `protobuf:"bytes,4,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	PendingBidsAmount  []*Price `protobuf:"bytes,5,rep,name=pending_bids_amount,json=pendingBidsAmount" json:"pending_bids_amount,omitempty"`
	TotalAmountPending *Price   `protobuf:"bytes,6,opt,name=total_amount_pending,json=totalAmountPending" json:"total_amount_pending,omitempty"`
}

func (m *Bidder) Reset()                    { *m = Bidder{} }
func (m *Bidder) String() string            { return proto.CompactTextString(m) }
func (*Bidder) ProtoMessage()               {}
func (*Bidder) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Bidder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bidder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bidder) GetBids() []*Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *Bidder) GetTotalAmount() *Price {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *Bidder) GetPendingBidsAmount() []*Price {
	if m != nil {
		return m.PendingBidsAmount
	}
	return nil
}

func (m *Bidder) GetTotalAmountPending() *Price {
	if m != nil {
		return m.TotalAmountPending
	}
	return nil
}

type Bid struct {
	Id        int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BidderId  int64   `protobuf:"varint,2,opt,name=bidder_id,json=bidderId" json:"bidder_id,omitempty"`
	BuyerId   int64   `protobuf:"varint,3,opt,name=buyer_id,json=buyerId" json:"buyer_id,omitempty"`
	ProductId int64   `protobuf:"varint,4,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	Price     float64 `protobuf:"fixed64,5,opt,name=price" json:"price,omitempty"`
}

func (m *Bid) Reset()                    { *m = Bid{} }
func (m *Bid) String() string            { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()               {}
func (*Bid) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Bid) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bid) GetBidderId() int64 {
	if m != nil {
		return m.BidderId
	}
	return 0
}

func (m *Bid) GetBuyerId() int64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *Bid) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Bid) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*Player)(nil), "rpc.Player")
	proto.RegisterType((*Bidder)(nil), "rpc.Bidder")
	proto.RegisterType((*Bid)(nil), "rpc.Bid")
}

func init() { proto.RegisterFile("github.com/shuoyang2016/mywish/rpc/player.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xcf, 0x6a, 0xb3, 0x40,
	0x10, 0x67, 0xa3, 0xf1, 0x4b, 0x26, 0x1f, 0x85, 0x6e, 0x73, 0xb0, 0x69, 0x0a, 0x92, 0x93, 0x97,
	0x6a, 0x9b, 0x42, 0x0f, 0xa5, 0x97, 0x7a, 0xcb, 0x2d, 0xf8, 0x02, 0xb2, 0xba, 0x62, 0x06, 0x74,
	0x77, 0xd1, 0x95, 0xe2, 0xb5, 0xaf, 0xdc, 0x17, 0x28, 0xee, 0x5a, 0x08, 0xe4, 0x92, 0x9b, 0xf3,
	0xfb, 0xeb, 0xcc, 0x42, 0x5c, 0xa1, 0x3e, 0xf5, 0x79, 0x54, 0xc8, 0x26, 0xee, 0x4e, 0xbd, 0x1c,
	0x98, 0xa8, 0xf6, 0xcf, 0x2f, 0x6f, 0x71, 0x33, 0x7c, 0x61, 0x77, 0x8a, 0x5b, 0x55, 0xc4, 0xaa,
	0x66, 0x43, 0xd9, 0x46, 0xaa, 0x95, 0x5a, 0x52, 0xa7, 0x55, 0xc5, 0x66, 0x5b, 0x49, 0x59, 0xd5,
	0x65, 0xcc, 0x14, 0xc6, 0x4c, 0x08, 0xa9, 0x99, 0x46, 0x29, 0x3a, 0x2b, 0xd9, 0x44, 0x57, 0x64,
	0x36, 0x52, 0x94, 0x83, 0xd5, 0xef, 0x12, 0xf0, 0x8e, 0xa6, 0x82, 0xde, 0xc0, 0x0c, 0xb9, 0x4f,
	0x02, 0x12, 0x3a, 0xe9, 0x0c, 0x39, 0xa5, 0xe0, 0x0a, 0xd6, 0x94, 0xfe, 0x2c, 0x20, 0xe1, 0x32,
	0x35, 0xdf, 0x74, 0x0d, 0x73, 0x56, 0x23, 0xeb, 0x7c, 0xc7, 0x80, 0x76, 0xd8, 0xfd, 0x10, 0xf0,
	0x12, 0xe4, 0xfc, 0xca, 0x90, 0x2d, 0xb8, 0x39, 0xf2, 0x31, 0xc3, 0x09, 0x57, 0xfb, 0x45, 0xd4,
	0xaa, 0x22, 0x4a, 0x90, 0xa7, 0x06, 0xa5, 0x4f, 0xf0, 0x5f, 0x4b, 0xcd, 0xea, 0x8c, 0x35, 0xb2,
	0x17, 0xda, 0x77, 0x03, 0x12, 0xae, 0xf6, 0x60, 0x54, 0xc7, 0x16, 0x8b, 0x32, 0x5d, 0x19, 0xfe,
	0xd3, 0xd0, 0xf4, 0x1d, 0xee, 0x54, 0x29, 0x38, 0x8a, 0x2a, 0x1b, 0xed, 0x7f, 0xae, 0xb9, 0xc9,
	0x3e, 0x77, 0xdd, 0x4e, 0xb2, 0x04, 0x79, 0x37, 0x79, 0x3f, 0x60, 0x7d, 0x5e, 0x95, 0x4d, 0x0a,
	0xdf, 0xbb, 0xa8, 0xa4, 0x67, 0x95, 0x47, 0xab, 0xda, 0x7d, 0x13, 0x70, 0x12, 0xe4, 0x17, 0x2b,
	0x3f, 0xc0, 0x32, 0x37, 0xc7, 0xc8, 0x90, 0x9b, 0xbd, 0x9d, 0x74, 0x61, 0x81, 0x03, 0xa7, 0xf7,
	0xb0, 0xc8, 0xfb, 0xc1, 0x72, 0x8e, 0xe1, 0xfe, 0x99, 0xf9, 0xc0, 0xe9, 0x23, 0x80, 0x6a, 0x25,
	0xef, 0x0b, 0x3d, 0x92, 0xae, 0x21, 0x97, 0x13, 0x72, 0xe0, 0xe3, 0xe9, 0xd5, 0xf8, 0x2f, 0xfe,
	0x3c, 0x20, 0x21, 0x49, 0xed, 0x90, 0x7b, 0xe6, 0x15, 0x5f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xea, 0xa2, 0x16, 0x47, 0x4b, 0x02, 0x00, 0x00,
}
