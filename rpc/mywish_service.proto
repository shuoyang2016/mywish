syntax = "proto3";
package rpc;
import "google/api/annotations.proto";
import "github.com/shuoyang2016/mywish/rpc/money.proto";
import "github.com/shuoyang2016/mywish/rpc/product.proto";
import "github.com/shuoyang2016/mywish/rpc/player.proto";

enum Error {
    SUCCESS = 0;
    GENERIC_FAILURE = 1;
}

message GetProductRequest {
    int64 product_id = 1;
    string product_name = 2;
}

message GetProductResponse {
    Product product = 1;
}

message BidProductRequest {
    Bid bid = 1;
}

message BidProductResponse {
    Error error = 1;
}

message BuyOutRequest {

}

message BuyOutResponse {

}

message CreateProductRequest {
    Product new_product = 1;
    int64 user_id = 2;
}

message CreateProductResponse {
    Error status = 1;
    string msg = 2;
}

message GetProductsRequest {
    int64 product_id = 1;
}

message GetProductsResponse {
    Product product = 1;
}

message UpdateProductRequest {
    int64 product_id = 1;
    int64 request_user_id = 2;
    Price price = 3;
    bool is_deal_price = 4;
    int64 bid_id = 5;
}

message UpdateProductResponse {
    int64 product_id = 1;
    int64 deal_id = 2;
}

message CheckOrCreateUserRequest {
    string user_name = 1;
    string email = 2;
    string password = 3;
}
message CheckOrCreateUserResponse {
    bool succeed = 1;
    string details = 2;
}

message AuthUserRequest {}
message AuthUserResponse {}
message UpdateUserRequest {}
message UpdateUserResponse {}
message DeleteUserRequest {}
message DeleteUserResponse {}
message GetUserRequest {
}
message GetUserResponse {}
message CreateUserRequest {}
message CreateUserResponse {}
message CreateBidderRequest {
    int64 bidder_id = 1;
    string bidder_name = 2;
}
message CreateBidderResponse {}
message GetBidderRequest {
    int64 bidder_id = 1;
}
message GetBidderResponse {}
message UpdateBidderRequest {}
message UpdateBidderResponse {}

service MyWishService {
    // <-------- Product APIs begin ---------> //
    rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse) {
        option (google.api.http) = {
          post: "/v1/product"
          body: "*"
        };
    }

    rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse) {
        option (google.api.http) = {
          put: "/v1/product"
          body: "*"
        };
    }

    rpc GetProduct(GetProductRequest) returns (GetProductResponse) {
        option (google.api.http) = {
          get: "/v1/product"
        };
    }

    rpc GetProducts(GetProductsRequest) returns (GetProductsResponse) {
        option (google.api.http) = {
          get: "/v1/product/list"
        };
    }

    rpc BidProduct(BidProductRequest) returns (BidProductResponse) {
        option (google.api.http) = {
          post: "/v1/product/bid"
          body: "*"
        };
    }
    // <-------- Product APIs end -----------> //
    // <-------- User APIs begin ---------> //
    rpc CreateBidder(CreateBidderRequest) returns (CreateBidderResponse) {
             option (google.api.http) = {
          post: "/v1/bidder"
          body: "*"
        };
    }
    rpc GetBidder(GetBidderRequest) returns (GetBidderResponse) {
        option (google.api.http) = {
          get: "/v1/bidder"
        };
    }
    rpc UpdateBidder(UpdateBidderRequest) returns (UpdateBidderResponse) {
        option (google.api.http) = {
          put: "/v1/bidder"
          body: "*"
        };
    }
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
          post: "/v1/user"
          body: "*"
        };
    }
    rpc CheckOrCreateUser(CheckOrCreateUserRequest) returns (CheckOrCreateUserResponse) {
        option (google.api.http) = {
          post: "/v1/user/register"
          body: "*"
        };
    }
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
          get: "/v1/user"
        };
    }
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
          delete: "/v1/user"
        };
    }
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
        option (google.api.http) = {
          put: "/v1/user"
          body: "*"
        };
    }
    rpc AuthUser(AuthUserRequest) returns (AuthUserResponse) {
        option (google.api.http) = {
          post: "/v1/user/auth"
          body: "*"
        };
    }
    // <-------- User APIs end -----------> //
}