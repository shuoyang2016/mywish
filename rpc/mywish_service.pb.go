// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/shuoyang2016/mywish/rpc/mywish_service.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Error int32

const (
	Error_SUCCESS         Error = 0
	Error_GENERIC_FAILURE Error = 1
)

var Error_name = map[int32]string{
	0: "SUCCESS",
	1: "GENERIC_FAILURE",
}
var Error_value = map[string]int32{
	"SUCCESS":         0,
	"GENERIC_FAILURE": 1,
}

func (x Error) String() string {
	return proto.EnumName(Error_name, int32(x))
}
func (Error) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type GetProductRequest struct {
	ProductId   int64  `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	ProductName string `protobuf:"bytes,2,opt,name=product_name,json=productName" json:"product_name,omitempty"`
}

func (m *GetProductRequest) Reset()                    { *m = GetProductRequest{} }
func (m *GetProductRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProductRequest) ProtoMessage()               {}
func (*GetProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetProductRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *GetProductRequest) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

type GetProductResponse struct {
	Product *Product `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
}

func (m *GetProductResponse) Reset()                    { *m = GetProductResponse{} }
func (m *GetProductResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProductResponse) ProtoMessage()               {}
func (*GetProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetProductResponse) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type BidProductRequest struct {
	Bid *Bid `protobuf:"bytes,1,opt,name=bid" json:"bid,omitempty"`
}

func (m *BidProductRequest) Reset()                    { *m = BidProductRequest{} }
func (m *BidProductRequest) String() string            { return proto.CompactTextString(m) }
func (*BidProductRequest) ProtoMessage()               {}
func (*BidProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *BidProductRequest) GetBid() *Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

type BidProductResponse struct {
	Error Error `protobuf:"varint,1,opt,name=error,enum=rpc.Error" json:"error,omitempty"`
}

func (m *BidProductResponse) Reset()                    { *m = BidProductResponse{} }
func (m *BidProductResponse) String() string            { return proto.CompactTextString(m) }
func (*BidProductResponse) ProtoMessage()               {}
func (*BidProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *BidProductResponse) GetError() Error {
	if m != nil {
		return m.Error
	}
	return Error_SUCCESS
}

type PayOffRequest struct {
	ProductId      int64 `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	TakeDealPrice  bool  `protobuf:"varint,2,opt,name=take_deal_price,json=takeDealPrice" json:"take_deal_price,omitempty"`
	TakeHighestBid bool  `protobuf:"varint,3,opt,name=take_highest_bid,json=takeHighestBid" json:"take_highest_bid,omitempty"`
	BidderId       int64 `protobuf:"varint,4,opt,name=bidder_id,json=bidderId" json:"bidder_id,omitempty"`
}

func (m *PayOffRequest) Reset()                    { *m = PayOffRequest{} }
func (m *PayOffRequest) String() string            { return proto.CompactTextString(m) }
func (*PayOffRequest) ProtoMessage()               {}
func (*PayOffRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *PayOffRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *PayOffRequest) GetTakeDealPrice() bool {
	if m != nil {
		return m.TakeDealPrice
	}
	return false
}

func (m *PayOffRequest) GetTakeHighestBid() bool {
	if m != nil {
		return m.TakeHighestBid
	}
	return false
}

func (m *PayOffRequest) GetBidderId() int64 {
	if m != nil {
		return m.BidderId
	}
	return 0
}

type PayOffResponse struct {
}

func (m *PayOffResponse) Reset()                    { *m = PayOffResponse{} }
func (m *PayOffResponse) String() string            { return proto.CompactTextString(m) }
func (*PayOffResponse) ProtoMessage()               {}
func (*PayOffResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type CreateProductRequest struct {
	NewProduct *Product `protobuf:"bytes,1,opt,name=new_product,json=newProduct" json:"new_product,omitempty"`
	UserId     int64    `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CreateProductRequest) Reset()                    { *m = CreateProductRequest{} }
func (m *CreateProductRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProductRequest) ProtoMessage()               {}
func (*CreateProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *CreateProductRequest) GetNewProduct() *Product {
	if m != nil {
		return m.NewProduct
	}
	return nil
}

func (m *CreateProductRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type CreateProductResponse struct {
	Status Error  `protobuf:"varint,1,opt,name=status,enum=rpc.Error" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *CreateProductResponse) Reset()                    { *m = CreateProductResponse{} }
func (m *CreateProductResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateProductResponse) ProtoMessage()               {}
func (*CreateProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *CreateProductResponse) GetStatus() Error {
	if m != nil {
		return m.Status
	}
	return Error_SUCCESS
}

func (m *CreateProductResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type CloseProductRequest struct {
	ProductId   int64 `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	RequesterId int64 `protobuf:"varint,2,opt,name=requester_id,json=requesterId" json:"requester_id,omitempty"`
}

func (m *CloseProductRequest) Reset()                    { *m = CloseProductRequest{} }
func (m *CloseProductRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseProductRequest) ProtoMessage()               {}
func (*CloseProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *CloseProductRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *CloseProductRequest) GetRequesterId() int64 {
	if m != nil {
		return m.RequesterId
	}
	return 0
}

type CloseProductResponse struct {
	Status Error  `protobuf:"varint,1,opt,name=status,enum=rpc.Error" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *CloseProductResponse) Reset()                    { *m = CloseProductResponse{} }
func (m *CloseProductResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseProductResponse) ProtoMessage()               {}
func (*CloseProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *CloseProductResponse) GetStatus() Error {
	if m != nil {
		return m.Status
	}
	return Error_SUCCESS
}

func (m *CloseProductResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type GetProductsRequest struct {
	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
}

func (m *GetProductsRequest) Reset()                    { *m = GetProductsRequest{} }
func (m *GetProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProductsRequest) ProtoMessage()               {}
func (*GetProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *GetProductsRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

type GetProductsResponse struct {
	Product *Product `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
}

func (m *GetProductsResponse) Reset()                    { *m = GetProductsResponse{} }
func (m *GetProductsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProductsResponse) ProtoMessage()               {}
func (*GetProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GetProductsResponse) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type UpdateProductRequest struct {
	ProductId     int64  `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	RequestUserId int64  `protobuf:"varint,2,opt,name=request_user_id,json=requestUserId" json:"request_user_id,omitempty"`
	Price         *Price `protobuf:"bytes,3,opt,name=price" json:"price,omitempty"`
	IsDealPrice   bool   `protobuf:"varint,4,opt,name=is_deal_price,json=isDealPrice" json:"is_deal_price,omitempty"`
	BidId         int64  `protobuf:"varint,5,opt,name=bid_id,json=bidId" json:"bid_id,omitempty"`
}

func (m *UpdateProductRequest) Reset()                    { *m = UpdateProductRequest{} }
func (m *UpdateProductRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProductRequest) ProtoMessage()               {}
func (*UpdateProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *UpdateProductRequest) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *UpdateProductRequest) GetRequestUserId() int64 {
	if m != nil {
		return m.RequestUserId
	}
	return 0
}

func (m *UpdateProductRequest) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *UpdateProductRequest) GetIsDealPrice() bool {
	if m != nil {
		return m.IsDealPrice
	}
	return false
}

func (m *UpdateProductRequest) GetBidId() int64 {
	if m != nil {
		return m.BidId
	}
	return 0
}

type UpdateProductResponse struct {
	ProductId int64 `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	DealId    int64 `protobuf:"varint,2,opt,name=deal_id,json=dealId" json:"deal_id,omitempty"`
}

func (m *UpdateProductResponse) Reset()                    { *m = UpdateProductResponse{} }
func (m *UpdateProductResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateProductResponse) ProtoMessage()               {}
func (*UpdateProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *UpdateProductResponse) GetProductId() int64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *UpdateProductResponse) GetDealId() int64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

type CheckOrCreateUserRequest struct {
	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *CheckOrCreateUserRequest) Reset()                    { *m = CheckOrCreateUserRequest{} }
func (m *CheckOrCreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckOrCreateUserRequest) ProtoMessage()               {}
func (*CheckOrCreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *CheckOrCreateUserRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CheckOrCreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CheckOrCreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CheckOrCreateUserResponse struct {
	Succeed bool   `protobuf:"varint,1,opt,name=succeed" json:"succeed,omitempty"`
	Details string `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
}

func (m *CheckOrCreateUserResponse) Reset()                    { *m = CheckOrCreateUserResponse{} }
func (m *CheckOrCreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckOrCreateUserResponse) ProtoMessage()               {}
func (*CheckOrCreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *CheckOrCreateUserResponse) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *CheckOrCreateUserResponse) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type AuthUserRequest struct {
}

func (m *AuthUserRequest) Reset()                    { *m = AuthUserRequest{} }
func (m *AuthUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserRequest) ProtoMessage()               {}
func (*AuthUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type AuthUserResponse struct {
}

func (m *AuthUserResponse) Reset()                    { *m = AuthUserResponse{} }
func (m *AuthUserResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthUserResponse) ProtoMessage()               {}
func (*AuthUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

type UpdateUserRequest struct {
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type UpdateUserResponse struct {
}

func (m *UpdateUserResponse) Reset()                    { *m = UpdateUserResponse{} }
func (m *UpdateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserResponse) ProtoMessage()               {}
func (*UpdateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

type DeleteUserRequest struct {
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

type DeleteUserResponse struct {
}

func (m *DeleteUserResponse) Reset()                    { *m = DeleteUserResponse{} }
func (m *DeleteUserResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserResponse) ProtoMessage()               {}
func (*DeleteUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

type GetUserRequest struct {
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

type GetUserResponse struct {
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

type CreateUserRequest struct {
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

type CreateUserResponse struct {
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

type CreateBidderRequest struct {
	Bidder *Bidder `protobuf:"bytes,1,opt,name=bidder" json:"bidder,omitempty"`
}

func (m *CreateBidderRequest) Reset()                    { *m = CreateBidderRequest{} }
func (m *CreateBidderRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateBidderRequest) ProtoMessage()               {}
func (*CreateBidderRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *CreateBidderRequest) GetBidder() *Bidder {
	if m != nil {
		return m.Bidder
	}
	return nil
}

type CreateBidderResponse struct {
}

func (m *CreateBidderResponse) Reset()                    { *m = CreateBidderResponse{} }
func (m *CreateBidderResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateBidderResponse) ProtoMessage()               {}
func (*CreateBidderResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

type GetBidderRequest struct {
	BidderId int64 `protobuf:"varint,1,opt,name=bidder_id,json=bidderId" json:"bidder_id,omitempty"`
}

func (m *GetBidderRequest) Reset()                    { *m = GetBidderRequest{} }
func (m *GetBidderRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBidderRequest) ProtoMessage()               {}
func (*GetBidderRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *GetBidderRequest) GetBidderId() int64 {
	if m != nil {
		return m.BidderId
	}
	return 0
}

type GetBidderResponse struct {
	Bidder *Bidder `protobuf:"bytes,1,opt,name=bidder" json:"bidder,omitempty"`
}

func (m *GetBidderResponse) Reset()                    { *m = GetBidderResponse{} }
func (m *GetBidderResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBidderResponse) ProtoMessage()               {}
func (*GetBidderResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *GetBidderResponse) GetBidder() *Bidder {
	if m != nil {
		return m.Bidder
	}
	return nil
}

type UpdateBidderRequest struct {
}

func (m *UpdateBidderRequest) Reset()                    { *m = UpdateBidderRequest{} }
func (m *UpdateBidderRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateBidderRequest) ProtoMessage()               {}
func (*UpdateBidderRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

type UpdateBidderResponse struct {
}

func (m *UpdateBidderResponse) Reset()                    { *m = UpdateBidderResponse{} }
func (m *UpdateBidderResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateBidderResponse) ProtoMessage()               {}
func (*UpdateBidderResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

type TestingDropRequest struct {
}

func (m *TestingDropRequest) Reset()                    { *m = TestingDropRequest{} }
func (m *TestingDropRequest) String() string            { return proto.CompactTextString(m) }
func (*TestingDropRequest) ProtoMessage()               {}
func (*TestingDropRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

type TestingDropResponse struct {
}

func (m *TestingDropResponse) Reset()                    { *m = TestingDropResponse{} }
func (m *TestingDropResponse) String() string            { return proto.CompactTextString(m) }
func (*TestingDropResponse) ProtoMessage()               {}
func (*TestingDropResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

type BuyProductRequest struct {
}

func (m *BuyProductRequest) Reset()                    { *m = BuyProductRequest{} }
func (m *BuyProductRequest) String() string            { return proto.CompactTextString(m) }
func (*BuyProductRequest) ProtoMessage()               {}
func (*BuyProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

type BuyProductResponse struct {
}

func (m *BuyProductResponse) Reset()                    { *m = BuyProductResponse{} }
func (m *BuyProductResponse) String() string            { return proto.CompactTextString(m) }
func (*BuyProductResponse) ProtoMessage()               {}
func (*BuyProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func init() {
	proto.RegisterType((*GetProductRequest)(nil), "rpc.GetProductRequest")
	proto.RegisterType((*GetProductResponse)(nil), "rpc.GetProductResponse")
	proto.RegisterType((*BidProductRequest)(nil), "rpc.BidProductRequest")
	proto.RegisterType((*BidProductResponse)(nil), "rpc.BidProductResponse")
	proto.RegisterType((*PayOffRequest)(nil), "rpc.PayOffRequest")
	proto.RegisterType((*PayOffResponse)(nil), "rpc.PayOffResponse")
	proto.RegisterType((*CreateProductRequest)(nil), "rpc.CreateProductRequest")
	proto.RegisterType((*CreateProductResponse)(nil), "rpc.CreateProductResponse")
	proto.RegisterType((*CloseProductRequest)(nil), "rpc.CloseProductRequest")
	proto.RegisterType((*CloseProductResponse)(nil), "rpc.CloseProductResponse")
	proto.RegisterType((*GetProductsRequest)(nil), "rpc.GetProductsRequest")
	proto.RegisterType((*GetProductsResponse)(nil), "rpc.GetProductsResponse")
	proto.RegisterType((*UpdateProductRequest)(nil), "rpc.UpdateProductRequest")
	proto.RegisterType((*UpdateProductResponse)(nil), "rpc.UpdateProductResponse")
	proto.RegisterType((*CheckOrCreateUserRequest)(nil), "rpc.CheckOrCreateUserRequest")
	proto.RegisterType((*CheckOrCreateUserResponse)(nil), "rpc.CheckOrCreateUserResponse")
	proto.RegisterType((*AuthUserRequest)(nil), "rpc.AuthUserRequest")
	proto.RegisterType((*AuthUserResponse)(nil), "rpc.AuthUserResponse")
	proto.RegisterType((*UpdateUserRequest)(nil), "rpc.UpdateUserRequest")
	proto.RegisterType((*UpdateUserResponse)(nil), "rpc.UpdateUserResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "rpc.DeleteUserRequest")
	proto.RegisterType((*DeleteUserResponse)(nil), "rpc.DeleteUserResponse")
	proto.RegisterType((*GetUserRequest)(nil), "rpc.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "rpc.GetUserResponse")
	proto.RegisterType((*CreateUserRequest)(nil), "rpc.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "rpc.CreateUserResponse")
	proto.RegisterType((*CreateBidderRequest)(nil), "rpc.CreateBidderRequest")
	proto.RegisterType((*CreateBidderResponse)(nil), "rpc.CreateBidderResponse")
	proto.RegisterType((*GetBidderRequest)(nil), "rpc.GetBidderRequest")
	proto.RegisterType((*GetBidderResponse)(nil), "rpc.GetBidderResponse")
	proto.RegisterType((*UpdateBidderRequest)(nil), "rpc.UpdateBidderRequest")
	proto.RegisterType((*UpdateBidderResponse)(nil), "rpc.UpdateBidderResponse")
	proto.RegisterType((*TestingDropRequest)(nil), "rpc.TestingDropRequest")
	proto.RegisterType((*TestingDropResponse)(nil), "rpc.TestingDropResponse")
	proto.RegisterType((*BuyProductRequest)(nil), "rpc.BuyProductRequest")
	proto.RegisterType((*BuyProductResponse)(nil), "rpc.BuyProductResponse")
	proto.RegisterEnum("rpc.Error", Error_name, Error_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MyWishService service

type MyWishServiceClient interface {
	// <-------- Product APIs begin ---------> //
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	BidProduct(ctx context.Context, in *BidProductRequest, opts ...grpc.CallOption) (*BidProductResponse, error)
	PayOff(ctx context.Context, in *PayOffRequest, opts ...grpc.CallOption) (*PayOffResponse, error)
	CloseProduct(ctx context.Context, in *CloseProductRequest, opts ...grpc.CallOption) (*CloseProductResponse, error)
	// <-------- Product APIs end -----------> //
	// #########################################//
	// <-------- User APIs begin ---------> //
	CreateBidder(ctx context.Context, in *CreateBidderRequest, opts ...grpc.CallOption) (*CreateBidderResponse, error)
	GetBidder(ctx context.Context, in *GetBidderRequest, opts ...grpc.CallOption) (*GetBidderResponse, error)
	UpdateBidder(ctx context.Context, in *UpdateBidderRequest, opts ...grpc.CallOption) (*UpdateBidderResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	CheckOrCreateUser(ctx context.Context, in *CheckOrCreateUserRequest, opts ...grpc.CallOption) (*CheckOrCreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
	// <-------- User APIs end -----------> //
	// <-------- Testing APIs begin -----------> //
	TestingDropAll(ctx context.Context, in *TestingDropRequest, opts ...grpc.CallOption) (*TestingDropResponse, error)
}

type myWishServiceClient struct {
	cc *grpc.ClientConn
}

func NewMyWishServiceClient(cc *grpc.ClientConn) MyWishServiceClient {
	return &myWishServiceClient{cc}
}

func (c *myWishServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/CreateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/UpdateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/GetProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	out := new(GetProductsResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/GetProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) BidProduct(ctx context.Context, in *BidProductRequest, opts ...grpc.CallOption) (*BidProductResponse, error) {
	out := new(BidProductResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/BidProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) PayOff(ctx context.Context, in *PayOffRequest, opts ...grpc.CallOption) (*PayOffResponse, error) {
	out := new(PayOffResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/PayOff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) CloseProduct(ctx context.Context, in *CloseProductRequest, opts ...grpc.CallOption) (*CloseProductResponse, error) {
	out := new(CloseProductResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/CloseProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) CreateBidder(ctx context.Context, in *CreateBidderRequest, opts ...grpc.CallOption) (*CreateBidderResponse, error) {
	out := new(CreateBidderResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/CreateBidder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) GetBidder(ctx context.Context, in *GetBidderRequest, opts ...grpc.CallOption) (*GetBidderResponse, error) {
	out := new(GetBidderResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/GetBidder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) UpdateBidder(ctx context.Context, in *UpdateBidderRequest, opts ...grpc.CallOption) (*UpdateBidderResponse, error) {
	out := new(UpdateBidderResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/UpdateBidder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) CheckOrCreateUser(ctx context.Context, in *CheckOrCreateUserRequest, opts ...grpc.CallOption) (*CheckOrCreateUserResponse, error) {
	out := new(CheckOrCreateUserResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/CheckOrCreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	out := new(AuthUserResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/AuthUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myWishServiceClient) TestingDropAll(ctx context.Context, in *TestingDropRequest, opts ...grpc.CallOption) (*TestingDropResponse, error) {
	out := new(TestingDropResponse)
	err := grpc.Invoke(ctx, "/rpc.MyWishService/TestingDropAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MyWishService service

type MyWishServiceServer interface {
	// <-------- Product APIs begin ---------> //
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	GetProducts(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	BidProduct(context.Context, *BidProductRequest) (*BidProductResponse, error)
	PayOff(context.Context, *PayOffRequest) (*PayOffResponse, error)
	CloseProduct(context.Context, *CloseProductRequest) (*CloseProductResponse, error)
	// <-------- Product APIs end -----------> //
	// #########################################//
	// <-------- User APIs begin ---------> //
	CreateBidder(context.Context, *CreateBidderRequest) (*CreateBidderResponse, error)
	GetBidder(context.Context, *GetBidderRequest) (*GetBidderResponse, error)
	UpdateBidder(context.Context, *UpdateBidderRequest) (*UpdateBidderResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	CheckOrCreateUser(context.Context, *CheckOrCreateUserRequest) (*CheckOrCreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error)
	// <-------- User APIs end -----------> //
	// <-------- Testing APIs begin -----------> //
	TestingDropAll(context.Context, *TestingDropRequest) (*TestingDropResponse, error)
}

func RegisterMyWishServiceServer(s *grpc.Server, srv MyWishServiceServer) {
	s.RegisterService(&_MyWishService_serviceDesc, srv)
}

func _MyWishService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).GetProducts(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_BidProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).BidProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/BidProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).BidProduct(ctx, req.(*BidProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_PayOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).PayOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/PayOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).PayOff(ctx, req.(*PayOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_CloseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).CloseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/CloseProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).CloseProduct(ctx, req.(*CloseProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_CreateBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBidderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).CreateBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/CreateBidder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).CreateBidder(ctx, req.(*CreateBidderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_GetBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBidderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).GetBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/GetBidder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).GetBidder(ctx, req.(*GetBidderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_UpdateBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBidderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).UpdateBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/UpdateBidder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).UpdateBidder(ctx, req.(*UpdateBidderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_CheckOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOrCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).CheckOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/CheckOrCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).CheckOrCreateUser(ctx, req.(*CheckOrCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyWishService_TestingDropAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestingDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyWishServiceServer).TestingDropAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MyWishService/TestingDropAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyWishServiceServer).TestingDropAll(ctx, req.(*TestingDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyWishService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MyWishService",
	HandlerType: (*MyWishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _MyWishService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _MyWishService_UpdateProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _MyWishService_GetProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _MyWishService_GetProducts_Handler,
		},
		{
			MethodName: "BidProduct",
			Handler:    _MyWishService_BidProduct_Handler,
		},
		{
			MethodName: "PayOff",
			Handler:    _MyWishService_PayOff_Handler,
		},
		{
			MethodName: "CloseProduct",
			Handler:    _MyWishService_CloseProduct_Handler,
		},
		{
			MethodName: "CreateBidder",
			Handler:    _MyWishService_CreateBidder_Handler,
		},
		{
			MethodName: "GetBidder",
			Handler:    _MyWishService_GetBidder_Handler,
		},
		{
			MethodName: "UpdateBidder",
			Handler:    _MyWishService_UpdateBidder_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _MyWishService_CreateUser_Handler,
		},
		{
			MethodName: "CheckOrCreateUser",
			Handler:    _MyWishService_CheckOrCreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _MyWishService_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _MyWishService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _MyWishService_UpdateUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _MyWishService_AuthUser_Handler,
		},
		{
			MethodName: "TestingDropAll",
			Handler:    _MyWishService_TestingDropAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/shuoyang2016/mywish/rpc/mywish_service.proto",
}

func init() {
	proto.RegisterFile("github.com/shuoyang2016/mywish/rpc/mywish_service.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 1271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0xfd, 0x14, 0xc5, 0x96, 0x34, 0xb2, 0x2c, 0x69, 0x25, 0xd9, 0x32, 0xf3, 0x03, 0x7f, 0x5b,
	0x20, 0x70, 0x0d, 0xd4, 0x4c, 0x1c, 0x20, 0x2d, 0x8c, 0xf6, 0xc2, 0x96, 0x1d, 0x57, 0x40, 0xfc,
	0x53, 0xba, 0x46, 0xd0, 0x5c, 0x44, 0xa0, 0xc8, 0x8d, 0xb4, 0x08, 0x25, 0xb2, 0x24, 0x15, 0x43,
	0xb7, 0x7d, 0x85, 0x5e, 0xf7, 0x45, 0xfa, 0x1a, 0x7d, 0x85, 0xbe, 0x47, 0x8b, 0xdd, 0x1d, 0x8a,
	0xa4, 0xc8, 0x24, 0x0a, 0x7a, 0x27, 0x9e, 0x99, 0x3d, 0x73, 0x76, 0x76, 0x76, 0x66, 0x05, 0xdf,
	0x8e, 0x78, 0x38, 0x9e, 0x0d, 0x0f, 0x2c, 0x77, 0xa2, 0x07, 0xe3, 0x99, 0x3b, 0x37, 0xa7, 0xa3,
	0xc3, 0xa7, 0xcf, 0x5e, 0xe8, 0x93, 0xf9, 0x1d, 0x0f, 0xc6, 0xba, 0xef, 0x59, 0xf8, 0x73, 0x10,
	0x30, 0xff, 0x03, 0xb7, 0xd8, 0x81, 0xe7, 0xbb, 0xa1, 0x4b, 0x8a, 0xbe, 0x67, 0x69, 0x0f, 0x47,
	0xae, 0x3b, 0x72, 0x98, 0x6e, 0x7a, 0x5c, 0x37, 0xa7, 0x53, 0x37, 0x34, 0x43, 0xee, 0x4e, 0x03,
	0xe5, 0xa2, 0x1d, 0xac, 0xc2, 0xed, 0x4e, 0xd9, 0x1c, 0xfd, 0x9f, 0xae, 0xe0, 0xef, 0xf9, 0xae,
	0x3d, 0xb3, 0x42, 0x5c, 0xa1, 0xaf, 0xb2, 0xc2, 0x31, 0xe7, 0xcc, 0x57, 0x0b, 0xe8, 0x2d, 0x34,
	0xcf, 0x59, 0x78, 0xad, 0x48, 0x0c, 0xf6, 0xeb, 0x8c, 0x05, 0x21, 0x79, 0x04, 0x80, 0xb4, 0x03,
	0x6e, 0x77, 0x0b, 0xbb, 0x85, 0xbd, 0xa2, 0x51, 0x41, 0xa4, 0x6f, 0x93, 0xff, 0xc3, 0x46, 0x64,
	0x9e, 0x9a, 0x13, 0xd6, 0xbd, 0xb7, 0x5b, 0xd8, 0xab, 0x18, 0x55, 0xc4, 0x2e, 0xcd, 0x09, 0xa3,
	0xdf, 0x03, 0x49, 0xd2, 0x06, 0x9e, 0x3b, 0x0d, 0x18, 0x79, 0x02, 0x25, 0x74, 0x92, 0xa4, 0xd5,
	0xc3, 0x8d, 0x03, 0xdf, 0xb3, 0x0e, 0x22, 0xb7, 0xc8, 0x48, 0x75, 0x68, 0x9e, 0x70, 0x7b, 0x49,
	0x94, 0x06, 0xc5, 0x21, 0xaa, 0xa9, 0x1e, 0x96, 0xe5, 0xc2, 0x13, 0x6e, 0x1b, 0x02, 0xa4, 0x2f,
	0x80, 0x24, 0x17, 0x60, 0xb8, 0x5d, 0x58, 0x63, 0xbe, 0xef, 0xfa, 0x72, 0xcd, 0xe6, 0x21, 0xc8,
	0x35, 0x67, 0x02, 0x31, 0x94, 0x81, 0xfe, 0x51, 0x80, 0xda, 0xb5, 0x39, 0xbf, 0x7a, 0xf7, 0x6e,
	0xc5, 0xad, 0x3f, 0x81, 0x7a, 0x68, 0xbe, 0x67, 0x03, 0x9b, 0x99, 0xce, 0xc0, 0xf3, 0xb9, 0xa5,
	0x76, 0x5f, 0x36, 0x6a, 0x02, 0x3e, 0x65, 0xa6, 0x73, 0x2d, 0x40, 0xb2, 0x07, 0x0d, 0xe9, 0x37,
	0xe6, 0xa3, 0x31, 0x0b, 0xc2, 0x81, 0x50, 0x5e, 0x94, 0x8e, 0x9b, 0x02, 0xff, 0x51, 0xc1, 0x27,
	0xdc, 0x26, 0x0f, 0xa0, 0x32, 0xe4, 0xb6, 0xcd, 0x7c, 0x11, 0xef, 0xbe, 0x8c, 0x57, 0x56, 0x40,
	0xdf, 0xa6, 0x0d, 0xd8, 0x8c, 0xe4, 0xa9, 0x3d, 0xd1, 0xb7, 0xd0, 0xee, 0xf9, 0xcc, 0x0c, 0xd9,
	0x52, 0x76, 0xbe, 0x81, 0xea, 0x94, 0xdd, 0x0d, 0x3e, 0x95, 0x5e, 0x98, 0xb2, 0x3b, 0xfc, 0x4d,
	0xb6, 0xa1, 0x34, 0x0b, 0x54, 0xcc, 0x7b, 0x32, 0xe6, 0xba, 0xf8, 0xec, 0xdb, 0xf4, 0x02, 0x3a,
	0x4b, 0xfc, 0x98, 0x4c, 0x0a, 0xeb, 0x41, 0x68, 0x86, 0xb3, 0x20, 0x27, 0x9b, 0x68, 0x21, 0x0d,
	0x28, 0x4e, 0x82, 0x11, 0xd6, 0x83, 0xf8, 0x49, 0x5f, 0x43, 0xab, 0xe7, 0xb8, 0x01, 0xfb, 0xe2,
	0x02, 0xf3, 0x95, 0x67, 0x52, 0x62, 0x75, 0x81, 0xf5, 0x6d, 0xfa, 0x0a, 0xda, 0x69, 0xe2, 0xff,
	0x24, 0xf3, 0x79, 0xb2, 0x5c, 0x83, 0xd5, 0x54, 0xd2, 0x1f, 0xa0, 0x95, 0x5a, 0xf4, 0x85, 0x45,
	0xfe, 0x67, 0x01, 0xda, 0xb7, 0x9e, 0x9d, 0x3d, 0xca, 0xcf, 0x97, 0x20, 0x26, 0x62, 0x90, 0x3e,
	0xc2, 0x1a, 0xc2, 0xb7, 0xf2, 0x24, 0x45, 0xf5, 0xab, 0x02, 0x2d, 0x4a, 0x15, 0x80, 0x2a, 0xb8,
	0xc5, 0x0c, 0x65, 0x20, 0x14, 0x6a, 0x3c, 0x48, 0x96, 0xf2, 0x7d, 0x59, 0xa1, 0x55, 0x1e, 0xc4,
	0x85, 0xdc, 0x81, 0xf5, 0x21, 0xb7, 0x45, 0x90, 0x35, 0x19, 0x64, 0x6d, 0xc8, 0xed, 0xbe, 0x4d,
	0xaf, 0xa0, 0xb3, 0xa4, 0x1d, 0x77, 0xff, 0x19, 0xf1, 0xdb, 0x50, 0x92, 0xf1, 0xe2, 0xba, 0x13,
	0x9f, 0x7d, 0x9b, 0x72, 0xe8, 0xf6, 0xc6, 0xcc, 0x7a, 0x7f, 0xe5, 0xab, 0xf2, 0x13, 0x9b, 0x88,
	0x12, 0xf2, 0x00, 0x2a, 0x72, 0xa7, 0xb2, 0xd9, 0x14, 0xe4, 0xa9, 0x95, 0x05, 0x20, 0x3a, 0x0d,
	0x69, 0xc3, 0x1a, 0x9b, 0x98, 0xdc, 0xc1, 0xe3, 0x54, 0x1f, 0x44, 0x83, 0xb2, 0x67, 0x06, 0xc1,
	0x9d, 0xeb, 0xab, 0x7b, 0x57, 0x31, 0x16, 0xdf, 0xf4, 0x0a, 0x76, 0x72, 0x42, 0xa1, 0xfe, 0x2e,
	0x94, 0x82, 0x99, 0x65, 0x31, 0xa6, 0xc4, 0x97, 0x8d, 0xe8, 0x53, 0x58, 0x6c, 0x16, 0x9a, 0xdc,
	0x09, 0x30, 0x54, 0xf4, 0x49, 0x9b, 0x50, 0x3f, 0x9e, 0x85, 0xe3, 0x84, 0x64, 0x4a, 0xa0, 0x11,
	0x43, 0x78, 0x75, 0x5b, 0xd0, 0x54, 0x39, 0x4b, 0x3a, 0xb6, 0x81, 0x24, 0xc1, 0xd8, 0xf5, 0x94,
	0x39, 0x2c, 0xe3, 0x9a, 0x04, 0xd1, 0xb5, 0x01, 0x9b, 0xe7, 0x2c, 0x4c, 0xfa, 0x35, 0xa1, 0xbe,
	0x40, 0x62, 0xbe, 0x4c, 0x5a, 0x05, 0x5f, 0x36, 0x01, 0xf4, 0x08, 0x5a, 0x0a, 0x3d, 0x91, 0x4d,
	0x28, 0x3a, 0x83, 0xaf, 0x64, 0x1d, 0xd8, 0xcc, 0xc7, 0xa2, 0xae, 0x46, 0x0d, 0x58, 0xf8, 0xa0,
	0x89, 0x6e, 0x45, 0xcd, 0x29, 0x5a, 0x8b, 0x9c, 0x3a, 0x34, 0xce, 0x59, 0x98, 0x26, 0x4c, 0xf5,
	0xbd, 0xc2, 0x52, 0xdf, 0xfb, 0x4e, 0x4e, 0xa5, 0x34, 0xcb, 0x6a, 0x12, 0x3a, 0xd0, 0x52, 0xf9,
	0x4c, 0x45, 0x13, 0xca, 0xd2, 0x30, 0x2a, 0x6b, 0x03, 0xf9, 0x99, 0x05, 0x21, 0x9f, 0x8e, 0x4e,
	0x7d, 0xd7, 0x8b, 0xbc, 0x3b, 0xd0, 0x4a, 0xa1, 0x71, 0x16, 0x4f, 0x66, 0xf3, 0xf4, 0x6d, 0x15,
	0x0c, 0x49, 0x50, 0xb9, 0xee, 0x7f, 0x0d, 0x6b, 0xb2, 0xe7, 0x90, 0x2a, 0x94, 0x6e, 0x6e, 0x7b,
	0xbd, 0xb3, 0x9b, 0x9b, 0xc6, 0xff, 0x48, 0x0b, 0xea, 0xe7, 0x67, 0x97, 0x67, 0x46, 0xbf, 0x37,
	0x78, 0x79, 0xdc, 0x7f, 0x75, 0x6b, 0x9c, 0x35, 0x0a, 0x87, 0xff, 0x54, 0xa1, 0x76, 0x31, 0x7f,
	0xcd, 0x83, 0xf1, 0x8d, 0x7a, 0x4f, 0x90, 0xb7, 0x50, 0x4b, 0xf5, 0x60, 0xb2, 0x23, 0x77, 0x9a,
	0xd7, 0xf7, 0x35, 0x2d, 0xcf, 0x84, 0x7a, 0xb7, 0x7e, 0xfb, 0xeb, 0xef, 0xdf, 0xef, 0x35, 0x68,
	0x55, 0xff, 0xf0, 0x2c, 0x7a, 0x27, 0x1c, 0x15, 0xf6, 0x05, 0x7f, 0xea, 0xf2, 0x22, 0x7f, 0x5e,
	0x33, 0x42, 0xfe, 0xdc, 0xbb, 0x1e, 0xf1, 0x6b, 0xcb, 0xfc, 0x06, 0x40, 0xdc, 0x18, 0xc9, 0x96,
	0x64, 0xc8, 0x3c, 0x32, 0xb4, 0xed, 0x0c, 0x1e, 0xa5, 0x59, 0xd2, 0xd6, 0x48, 0x92, 0x96, 0xbc,
	0x81, 0x6a, 0xa2, 0xd9, 0x92, 0xe5, 0xc5, 0x51, 0xcf, 0xd6, 0xba, 0x59, 0x03, 0xd2, 0x76, 0x25,
	0x2d, 0x21, 0x8d, 0x04, 0xad, 0xee, 0xf0, 0x20, 0x24, 0xbf, 0x00, 0xc4, 0xaf, 0x07, 0xd4, 0x9b,
	0x79, 0x7f, 0xa0, 0xde, 0xec, 0x33, 0x83, 0x6a, 0x92, 0xb8, 0x4d, 0xeb, 0x49, 0xe2, 0x21, 0xb7,
	0x45, 0x2a, 0x2e, 0x60, 0x5d, 0x0d, 0x70, 0x42, 0x54, 0xff, 0x4d, 0x3e, 0x36, 0xb4, 0x56, 0x0a,
	0xfb, 0x24, 0xdd, 0x6c, 0x2e, 0xe8, 0x4c, 0xd8, 0x48, 0x4e, 0x3d, 0xa2, 0x76, 0x9b, 0x33, 0x61,
	0xb5, 0x9d, 0x1c, 0x0b, 0x06, 0x78, 0x28, 0x03, 0x6c, 0xd1, 0x66, 0x32, 0x80, 0x25, 0x3c, 0x45,
	0x88, 0x37, 0xb0, 0x91, 0xbc, 0xc3, 0x51, 0x88, 0x6c, 0x4b, 0xd0, 0x76, 0x72, 0x2c, 0x18, 0xa2,
	0x23, 0x43, 0xd4, 0x29, 0x88, 0x10, 0xea, 0x66, 0x0a, 0xee, 0x4b, 0xa8, 0x2c, 0xae, 0x35, 0xe9,
	0x44, 0x27, 0x95, 0x66, 0xdd, 0x5a, 0x86, 0x91, 0x92, 0x48, 0xca, 0x0d, 0x92, 0xa0, 0x14, 0x5a,
	0x93, 0xb7, 0x1a, 0xb5, 0xe6, 0xdc, 0x7f, 0x6d, 0x27, 0xc7, 0x92, 0xd6, 0xaa, 0x2d, 0x69, 0x35,
	0x00, 0xe2, 0xee, 0x88, 0x45, 0x91, 0xe9, 0xa1, 0x58, 0x14, 0x39, 0x6d, 0x14, 0x8b, 0x98, 0x96,
	0x05, 0xab, 0x18, 0x56, 0x82, 0xd3, 0x83, 0x66, 0x66, 0xf2, 0x90, 0x47, 0x8a, 0xe2, 0x23, 0xc3,
	0x4f, 0x7b, 0xfc, 0x31, 0x73, 0xde, 0x69, 0x8a, 0x40, 0xba, 0xcf, 0x46, 0x5c, 0xbc, 0x92, 0x44,
	0xc4, 0x97, 0x50, 0xc2, 0x59, 0x40, 0x5a, 0x51, 0x62, 0x93, 0xec, 0xed, 0x34, 0x18, 0xcd, 0x14,
	0xc9, 0x09, 0x64, 0x21, 0x9e, 0x5c, 0x01, 0xc4, 0xb3, 0x07, 0xb3, 0x91, 0x99, 0x50, 0x98, 0x8d,
	0xbc, 0x21, 0xa5, 0x08, 0xf7, 0x63, 0x42, 0x03, 0x20, 0x9e, 0x7b, 0x48, 0x98, 0x99, 0x8e, 0x48,
	0x98, 0x37, 0x20, 0x55, 0x7a, 0xb5, 0x54, 0x7a, 0x7f, 0x82, 0x72, 0x34, 0x74, 0x89, 0xda, 0xd8,
	0xd2, 0x58, 0xd6, 0x3a, 0x4b, 0x68, 0xba, 0x35, 0xd0, 0xda, 0x22, 0x87, 0xe6, 0x2c, 0x1c, 0x0b,
	0x4a, 0x0b, 0x36, 0x13, 0x93, 0xe0, 0xd8, 0x71, 0xb0, 0xf3, 0x64, 0x87, 0x06, 0x76, 0x9e, 0xbc,
	0xb9, 0xf1, 0x58, 0xd2, 0x77, 0x69, 0x4b, 0xd0, 0x87, 0xca, 0x41, 0xb7, 0x7d, 0xd7, 0x33, 0x1d,
	0xe7, 0xa8, 0xb0, 0x3f, 0x5c, 0x97, 0x7f, 0xc5, 0x9e, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xaa,
	0x9d, 0xce, 0x47, 0x7b, 0x0e, 0x00, 0x00,
}
