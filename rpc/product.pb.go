// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/shuoyang2016/mywish/rpc/product.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Product_Type int32

const (
	Product_NORMAL  Product_Type = 0
	Product_VAGUE   Product_Type = 1
	Product_SUPRISE Product_Type = 2
)

var Product_Type_name = map[int32]string{
	0: "NORMAL",
	1: "VAGUE",
	2: "SUPRISE",
}
var Product_Type_value = map[string]int32{
	"NORMAL":  0,
	"VAGUE":   1,
	"SUPRISE": 2,
}

func (x Product_Type) String() string {
	return proto.EnumName(Product_Type_name, int32(x))
}
func (Product_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type Product struct {
	Id               int64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             string                      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type             Product_Type                `protobuf:"varint,3,opt,name=type,enum=rpc.Product_Type" json:"type,omitempty"`
	Brand            string                      `protobuf:"bytes,4,opt,name=brand" json:"brand,omitempty"`
	DoubleConfirm    bool                        `protobuf:"varint,5,opt,name=double_confirm,json=doubleConfirm" json:"double_confirm,omitempty"`
	AcceptRatio      uint32                      `protobuf:"varint,6,opt,name=accept_ratio,json=acceptRatio" json:"accept_ratio,omitempty"`
	SellerMinlevel   uint32                      `protobuf:"varint,7,opt,name=seller_minlevel,json=sellerMinlevel" json:"seller_minlevel,omitempty"`
	ExtraDescription string                      `protobuf:"bytes,8,opt,name=extra_description,json=extraDescription" json:"extra_description,omitempty"`
	BeginTime        *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=begin_time,json=beginTime" json:"begin_time,omitempty"`
	Duration         *google_protobuf2.Duration  `protobuf:"bytes,10,opt,name=duration" json:"duration,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Product) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetType() Product_Type {
	if m != nil {
		return m.Type
	}
	return Product_NORMAL
}

func (m *Product) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *Product) GetDoubleConfirm() bool {
	if m != nil {
		return m.DoubleConfirm
	}
	return false
}

func (m *Product) GetAcceptRatio() uint32 {
	if m != nil {
		return m.AcceptRatio
	}
	return 0
}

func (m *Product) GetSellerMinlevel() uint32 {
	if m != nil {
		return m.SellerMinlevel
	}
	return 0
}

func (m *Product) GetExtraDescription() string {
	if m != nil {
		return m.ExtraDescription
	}
	return ""
}

func (m *Product) GetBeginTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.BeginTime
	}
	return nil
}

func (m *Product) GetDuration() *google_protobuf2.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type KVPair struct {
	Key        string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	BoolValue  bool   `protobuf:"varint,2,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	IntValue   int64  `protobuf:"varint,3,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	BytesValue []byte `protobuf:"bytes,4,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
}

func (m *KVPair) Reset()                    { *m = KVPair{} }
func (m *KVPair) String() string            { return proto.CompactTextString(m) }
func (*KVPair) ProtoMessage()               {}
func (*KVPair) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *KVPair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KVPair) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *KVPair) GetIntValue() int64 {
	if m != nil {
		return m.IntValue
	}
	return 0
}

func (m *KVPair) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

type SupriseProduct struct {
	Base            *Product  `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Usage           string    `protobuf:"bytes,2,opt,name=usage" json:"usage,omitempty"`
	Function        string    `protobuf:"bytes,3,opt,name=function" json:"function,omitempty"`
	PositiveFilters []*KVPair `protobuf:"bytes,4,rep,name=positive_filters,json=positiveFilters" json:"positive_filters,omitempty"`
	NegtiveFilters  []*KVPair `protobuf:"bytes,5,rep,name=negtive_filters,json=negtiveFilters" json:"negtive_filters,omitempty"`
}

func (m *SupriseProduct) Reset()                    { *m = SupriseProduct{} }
func (m *SupriseProduct) String() string            { return proto.CompactTextString(m) }
func (*SupriseProduct) ProtoMessage()               {}
func (*SupriseProduct) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *SupriseProduct) GetBase() *Product {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *SupriseProduct) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

func (m *SupriseProduct) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *SupriseProduct) GetPositiveFilters() []*KVPair {
	if m != nil {
		return m.PositiveFilters
	}
	return nil
}

func (m *SupriseProduct) GetNegtiveFilters() []*KVPair {
	if m != nil {
		return m.NegtiveFilters
	}
	return nil
}

type VagueProduct struct {
	Base     *Product `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Usage    string   `protobuf:"bytes,2,opt,name=usage" json:"usage,omitempty"`
	Function string   `protobuf:"bytes,3,opt,name=function" json:"function,omitempty"`
}

func (m *VagueProduct) Reset()                    { *m = VagueProduct{} }
func (m *VagueProduct) String() string            { return proto.CompactTextString(m) }
func (*VagueProduct) ProtoMessage()               {}
func (*VagueProduct) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *VagueProduct) GetBase() *Product {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *VagueProduct) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

func (m *VagueProduct) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func init() {
	proto.RegisterType((*Product)(nil), "rpc.Product")
	proto.RegisterType((*KVPair)(nil), "rpc.KVPair")
	proto.RegisterType((*SupriseProduct)(nil), "rpc.SupriseProduct")
	proto.RegisterType((*VagueProduct)(nil), "rpc.VagueProduct")
	proto.RegisterEnum("rpc.Product_Type", Product_Type_name, Product_Type_value)
}

func init() { proto.RegisterFile("github.com/shuoyang2016/mywish/rpc/product.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x26, 0x4d, 0xdb, 0x35, 0x27, 0x5d, 0xd7, 0x59, 0x5c, 0x84, 0xf2, 0xb3, 0x50, 0x69, 0x22,
	0x02, 0x29, 0x19, 0x05, 0x26, 0x71, 0x39, 0xb1, 0x81, 0x10, 0x0c, 0x26, 0x6f, 0xeb, 0x6d, 0xe4,
	0x24, 0x6e, 0x66, 0x91, 0xc4, 0x96, 0xe3, 0x6c, 0xf4, 0x8d, 0x78, 0x1e, 0x9e, 0x08, 0xc5, 0x4e,
	0xc7, 0xcf, 0xae, 0xb9, 0xcb, 0xf9, 0x7e, 0x9c, 0x73, 0xbe, 0x73, 0xe0, 0x20, 0x67, 0xea, 0xaa,
	0x49, 0xc2, 0x94, 0x97, 0x51, 0x7d, 0xd5, 0xf0, 0x35, 0xa9, 0xf2, 0xc5, 0xc1, 0xcb, 0xc3, 0xa8,
	0x5c, 0xdf, 0xb0, 0xfa, 0x2a, 0x92, 0x22, 0x8d, 0x84, 0xe4, 0x59, 0x93, 0xaa, 0x50, 0x48, 0xae,
	0x38, 0xb2, 0xa5, 0x48, 0x67, 0x8f, 0x72, 0xce, 0xf3, 0x82, 0x46, 0x44, 0xb0, 0x88, 0x54, 0x15,
	0x57, 0x44, 0x31, 0x5e, 0xd5, 0x46, 0x32, 0xdb, 0xeb, 0x58, 0x5d, 0x25, 0xcd, 0x2a, 0x52, 0xac,
	0xa4, 0xb5, 0x22, 0xa5, 0xe8, 0x04, 0x4f, 0xfe, 0x15, 0x64, 0x8d, 0xd4, 0x2f, 0x18, 0x7e, 0xfe,
	0xc3, 0x86, 0xad, 0x33, 0xf3, 0x57, 0x34, 0x81, 0x1e, 0xcb, 0x3c, 0xcb, 0xb7, 0x02, 0x1b, 0xf7,
	0x58, 0x86, 0x10, 0xf4, 0x2b, 0x52, 0x52, 0xaf, 0xe7, 0x5b, 0x81, 0x83, 0xf5, 0x37, 0xda, 0x87,
	0xbe, 0x5a, 0x0b, 0xea, 0xd9, 0xbe, 0x15, 0x4c, 0x16, 0xbb, 0xa1, 0x14, 0x69, 0xd8, 0xf9, 0xc3,
	0x8b, 0xb5, 0xa0, 0x58, 0xd3, 0xe8, 0x3e, 0x0c, 0x12, 0x49, 0xaa, 0xcc, 0xeb, 0x6b, 0xaf, 0x29,
	0xd0, 0x3e, 0x4c, 0x32, 0xde, 0x24, 0x05, 0x8d, 0x53, 0x5e, 0xad, 0x98, 0x2c, 0xbd, 0x81, 0x6f,
	0x05, 0x23, 0xbc, 0x6d, 0xd0, 0x77, 0x06, 0x44, 0x4f, 0x61, 0x4c, 0xd2, 0x94, 0x0a, 0x15, 0xeb,
	0x56, 0xbd, 0xa1, 0x6f, 0x05, 0xdb, 0xd8, 0x35, 0x18, 0x6e, 0x21, 0xf4, 0x0c, 0x76, 0x6a, 0x5a,
	0x14, 0x54, 0xc6, 0x25, 0xab, 0x0a, 0x7a, 0x4d, 0x0b, 0x6f, 0x4b, 0xab, 0x26, 0x06, 0x3e, 0xed,
	0x50, 0xf4, 0x02, 0x76, 0xe9, 0x77, 0x25, 0x49, 0x9c, 0xd1, 0x3a, 0x95, 0x4c, 0xb4, 0xa3, 0x7b,
	0x23, 0xdd, 0xd4, 0x54, 0x13, 0xc7, 0xbf, 0x71, 0xf4, 0x16, 0x20, 0xa1, 0x39, 0xab, 0xe2, 0x36,
	0x45, 0xcf, 0xf1, 0xad, 0xc0, 0x5d, 0xcc, 0x42, 0x93, 0x60, 0xb8, 0x49, 0x30, 0xbc, 0xd8, 0x44,
	0x8c, 0x1d, 0xad, 0x6e, 0x6b, 0xf4, 0x06, 0x46, 0x9b, 0x64, 0x3d, 0xd0, 0xc6, 0x07, 0x77, 0x8c,
	0xc7, 0x9d, 0x00, 0xdf, 0x4a, 0xe7, 0xcf, 0xa1, 0xdf, 0xa6, 0x86, 0x00, 0x86, 0x5f, 0xbe, 0xe2,
	0xd3, 0xa3, 0xcf, 0xd3, 0x7b, 0xc8, 0x81, 0xc1, 0xf2, 0xe8, 0xc3, 0xe5, 0xc9, 0xd4, 0x42, 0x2e,
	0x6c, 0x9d, 0x5f, 0x9e, 0xe1, 0x8f, 0xe7, 0x27, 0xd3, 0xde, 0xfc, 0x06, 0x86, 0x9f, 0x96, 0x67,
	0x84, 0x49, 0x34, 0x05, 0xfb, 0x1b, 0x5d, 0xeb, 0x4d, 0x39, 0xb8, 0xfd, 0x44, 0x8f, 0x01, 0x12,
	0xce, 0x8b, 0xf8, 0x9a, 0x14, 0x8d, 0x59, 0xd8, 0x08, 0x3b, 0x2d, 0xb2, 0x6c, 0x01, 0xf4, 0x10,
	0x1c, 0x56, 0xa9, 0x8e, 0xb5, 0xf5, 0x82, 0x47, 0xac, 0x52, 0x86, 0xdc, 0x03, 0x37, 0x59, 0x2b,
	0x5a, 0x77, 0x74, 0xbb, 0xb1, 0x31, 0x06, 0x0d, 0x69, 0xc1, 0xfc, 0xa7, 0x05, 0x93, 0xf3, 0x46,
	0x48, 0x56, 0xd3, 0xcd, 0xa9, 0xf8, 0xd0, 0x4f, 0x48, 0x4d, 0x75, 0x0b, 0xee, 0x62, 0xfc, 0xe7,
	0x19, 0x60, 0xcd, 0xb4, 0x17, 0xd0, 0xd4, 0x24, 0xdf, 0x5c, 0x8f, 0x29, 0xd0, 0x0c, 0x46, 0xab,
	0xa6, 0x4a, 0x75, 0x4c, 0xb6, 0x26, 0x6e, 0x6b, 0x74, 0x08, 0x53, 0xc1, 0x6b, 0xa6, 0xd8, 0x35,
	0x8d, 0x57, 0xac, 0x50, 0x54, 0xd6, 0x5e, 0xdf, 0xb7, 0x03, 0x77, 0xe1, 0xea, 0xf7, 0xcd, 0xf0,
	0x78, 0x67, 0x23, 0x7a, 0x6f, 0x34, 0xe8, 0x35, 0xec, 0x54, 0x34, 0xff, 0xcb, 0x36, 0xb8, 0x6b,
	0x9b, 0x74, 0x9a, 0xce, 0x35, 0x4f, 0x60, 0xbc, 0x24, 0x79, 0xf3, 0x3f, 0x27, 0x4a, 0x86, 0x7a,
	0xf5, 0xaf, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x80, 0x03, 0xec, 0x5f, 0xfb, 0x03, 0x00, 0x00,
}
